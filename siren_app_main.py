import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pygame
import os
import ctypes

# Hide console window (Windows only)
try:
    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
except:
    pass

# Configuration system
CONFIG_FILE = "config.txt"

def load_config():
    config = {"language": None, "theme": None, "media_path": None}
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            for line in f:
                if "=" in line and not line.strip().startswith("#"):
                    key, val = line.strip().split("=", 1)
                    if key in config:
                        config[key] = val
    return config

def save_config(language, theme, media_path):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        f.write("# ⚠️ DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING.\n")
        f.write("# Changing values may break the application.\n\n")
        f.write(f"language={language}\n")
        f.write(f"theme={theme}\n")
        f.write(f"media_path={media_path}\n")

config = load_config()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MEDIA_PATH = config["media_path"] if config["media_path"] else os.path.join(BASE_DIR, "media")

def ensure_media_folder():
    global MEDIA_PATH
    if not os.path.exists(MEDIA_PATH):
        tmp = tk.Tk()
        tmp.withdraw()
        messagebox.showwarning("Media folder missing", "Media folder not found. Please select your media directory.")
        path = filedialog.askdirectory(title="Select Media Folder")
        if path:
            MEDIA_PATH = path
            # Save to config so it remembers next time
            save_config(config["language"] or "en", config["theme"] or "light", MEDIA_PATH)
        else:
            messagebox.showerror("Error", "Media folder not selected. Sounds may not work.")
        tmp.destroy()

# Initialize audio
pygame.mixer.init()

def setup_screen():
    setup = tk.Tk()
    setup.title("🚨 Setup")
    setup.geometry("300x260")
    setup.eval('tk::PlaceWindow . center')

    selected_lang = tk.StringVar()
    selected_theme = tk.StringVar()

    def confirm():
        lang = selected_lang.get()
        theme = selected_theme.get()
        if not lang or not theme:
            messagebox.showwarning("Missing Selection", "Please select both language and theme before continuing.")
            return
        ensure_media_folder()
        save_config(lang, theme, MEDIA_PATH)
        setup.destroy()
        start_main_ui(lang, theme)

    tk.Label(setup, text="🚨  Select Language / Dil Seçiniz").pack(pady=5)
    ttk.Radiobutton(setup, text="Türkçe", value="tr", variable=selected_lang).pack()
    ttk.Radiobutton(setup, text="English", value="en", variable=selected_lang).pack()

    tk.Label(setup, text="\nSelect Theme / Tema Seçiniz").pack(pady=5)
    ttk.Radiobutton(setup, text="Light / Açık", value="light", variable=selected_theme).pack()
    ttk.Radiobutton(setup, text="Dark / Koyu", value="dark", variable=selected_theme).pack()

    ttk.Button(setup, text="OK", command=confirm).pack(pady=10)

    setup.mainloop()

def start_main_ui(language, theme):
    current_siren = None
    last_siren_file = None
    switch_mode = False
    current_mode = "a"
    horn_channel = pygame.mixer.Channel(5)
    flash_running = False
    flash_state = {"side": "left", "rep": 0, "color": 0}

    siren_files = {
        "1": "{mode}_1.ogg",
        "2": "{mode}_2.ogg",
        "3": "{mode}_3.ogg",
        "3_switch": "{mode}_4.ogg",
    }
    horn_file = "{mode}_horn.ogg"
    extend_file = "{mode}_el.ogg"

    def play_sound(file_path, loop=False):
        nonlocal current_siren, last_siren_file
        if not os.path.exists(file_path):
            messagebox.showwarning("Missing File", f"Sound file not found:\n{file_path}")
            return
        sound = pygame.mixer.Sound(file_path)
        channel = sound.play(-1 if loop else 0)
        current_siren = (sound, channel, file_path)
        if loop:
            last_siren_file = file_path

    def stop_current():
        nonlocal current_siren
        if current_siren:
            _, channel, _ = current_siren
            channel.stop()
            current_siren = None

    def stop_all_sounds():
        nonlocal current_siren, last_siren_file
        pygame.mixer.stop()
        current_siren = None
        last_siren_file = None

    def toggle_siren(siren_id):
        nonlocal switch_mode, current_mode
        file = siren_files["3_switch"].format(mode=current_mode) if siren_id == "3" and switch_mode else siren_files[siren_id].format(mode=current_mode)
        full_path = os.path.join(MEDIA_PATH, file)
        if current_siren and current_siren[2] == full_path:
            stop_current()
        else:
            stop_current()
            play_sound(full_path, loop=True)

    def toggle_switch():
        nonlocal switch_mode
        switch_mode = not switch_mode
        print("Switch mode:", switch_mode)

    def play_extend():
        nonlocal current_mode
        stop_current()
        full_path = os.path.join(MEDIA_PATH, extend_file.format(mode=current_mode))
        play_sound(full_path, loop=False)

    def play_horn(event):
        nonlocal current_siren, last_siren_file
        was_playing = last_siren_file
        if current_siren:
            stop_current()
        full_path = os.path.join(MEDIA_PATH, horn_file.format(mode=current_mode))
        if os.path.exists(full_path):
            sound = pygame.mixer.Sound(full_path)
            horn_channel.play(sound, loops=-1)
        event.widget.was_playing = was_playing

    def stop_horn(event):
        horn_channel.stop()
        if hasattr(event.widget, "was_playing") and event.widget.was_playing:
            play_sound(event.widget.was_playing, loop=True)

    def toggle_flash():
        nonlocal flash_running
        flash_running = not flash_running
        if flash_running:
            flash_state.update({"side": "left", "rep": 0, "color": 0})
            flash_cycle()
        else:
            left_frame.configure(bg=default_bg)
            right_frame.configure(bg=default_bg)

    def flash_cycle():
        if not flash_running:
            left_frame.configure(bg=default_bg)
            right_frame.configure(bg=default_bg)
            return

        side = flash_state["side"]
        rep = flash_state["rep"]
        color = flash_state["color"]
        active_color = "red" if side == "left" else "blue"

        if color == 0:
            if side == "left":
                left_frame.configure(bg=active_color)
                right_frame.configure(bg=default_bg)
            else:
                right_frame.configure(bg=active_color)
                left_frame.configure(bg=default_bg)
            flash_state["color"] = 1
            root.after(60, flash_cycle)
        else:
            left_frame.configure(bg=default_bg)
            right_frame.configure(bg=default_bg)
            rep += 1
            if rep >= 3:
                rep = 0
                side = "right" if side == "left" else "left"
            flash_state.update({"rep": rep, "side": side, "color": 0})
            root.after(60, flash_cycle)

    LANG = {
        "tr": {"mode": "Mod: ","stop_all": "Tüm Sesleri Durdur","horn": "Korna","switch": "Geçiş","flash": "Çakar",
               "exit": "Çıkış","extend": "Uzatma Siren","theme": "Tema"},
        "en": {"mode": "Mode: ","stop_all": "Stop All Sounds","horn": "Horn","switch": "Switch","flash": "Flash",
               "exit": "Exit","extend": "Extended Siren","theme": "Theme"}
    }

    light_bg = "#F0F0F0"
    dark_bg = "#212121"
    default_bg = dark_bg if theme == "dark" else light_bg
    text_color = "white" if theme == "dark" else "black"

    def apply_theme(t):
        nonlocal default_bg, text_color
        default_bg = dark_bg if t == "dark" else light_bg
        text_color = "white" if t == "dark" else "black"
        root.configure(bg=default_bg)
        left_frame.configure(bg=default_bg)
        right_frame.configure(bg=default_bg)
        main_frame.configure(bg=default_bg)
        mode_label.configure(bg=default_bg, fg=text_color)

    def toggle_theme():
        new = "dark" if default_bg == light_bg else "light"
        apply_theme(new)

    root = tk.Tk()
    root.title("🚨 Siren App v1.0 – by eyupensrr")
    root.attributes("-fullscreen", True)

    left_frame = tk.Frame(root, bg=default_bg)
    right_frame = tk.Frame(root, bg=default_bg)
    left_frame.grid(row=0, column=0, sticky="nsew")
    right_frame.grid(row=0, column=1, sticky="nsew")
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=1)
    root.grid_rowconfigure(0, weight=1)

    main_frame = tk.Frame(root, padx=10, pady=10, bg=default_bg)
    main_frame.place(relx=0.5, rely=0.5, anchor="center")

    mode_label = tk.Label(main_frame, text=LANG[language]["mode"] + "ARMAS", font=("Arial", 12, "bold"),
                          bg=default_bg, fg=text_color)
    mode_label.grid(row=0, column=0, columnspan=4, sticky="w")

    def set_mode(m):
        nonlocal current_mode
        current_mode = m
        stop_all_sounds()
        mode_label.config(text=LANG[language]["mode"] + ("ARMAS" if m == "a" else "CSR" if m == "c" else "ZER"))

    ttk.Button(main_frame, text="ARMAS", command=lambda: set_mode("a")).grid(row=1, column=0, padx=4, pady=4)
    ttk.Button(main_frame, text="CSR", command=lambda: set_mode("c")).grid(row=2, column=0, padx=4, pady=4)
    ttk.Button(main_frame, text="ZER", command=lambda: set_mode("z")).grid(row=3, column=0, padx=4, pady=4)

    ttk.Button(main_frame, text="Siren 1", command=lambda: toggle_siren("1")).grid(row=1, column=1, padx=4, pady=4)
    ttk.Button(main_frame, text="Siren 2", command=lambda: toggle_siren("2")).grid(row=2, column=1, padx=4, pady=4)
    ttk.Button(main_frame, text="Siren 3", command=lambda: toggle_siren("3")).grid(row=3, column=1, padx=4, pady=4)

    ttk.Button(main_frame, text=LANG[language]["stop_all"], command=stop_all_sounds).grid(row=1, column=2, padx=4, pady=4)
    horn_btn = ttk.Button(main_frame, text=LANG[language]["horn"])
    horn_btn.grid(row=2, column=2, padx=4, pady=4)
    horn_btn.bind("<ButtonPress>", play_horn)
    horn_btn.bind("<ButtonRelease>", stop_horn)

    switch_btn = ttk.Button(main_frame, text=LANG[language]["switch"], command=toggle_switch)
    switch_btn.grid(row=3, column=2, padx=4, pady=4)

    flash_btn = ttk.Button(main_frame, text=LANG[language]["flash"], command=toggle_flash)
    flash_btn.grid(row=2, column=3, padx=4, pady=4)

    extend_btn = ttk.Button(main_frame, text=LANG[language]["extend"], command=play_extend)
    extend_btn.grid(row=2, column=4, padx=4, pady=4)

    theme_btn = ttk.Button(main_frame, text=LANG[language]["theme"], command=toggle_theme)
    theme_btn.grid(row=3, column=4, padx=4, pady=4)

    exit_btn = ttk.Button(main_frame, text=LANG[language]["exit"], command=root.destroy)
    exit_btn.grid(row=1, column=4, padx=4, pady=4)

    root.mainloop()

# Launch setup or main app
if config["language"] and config["theme"]:
    start_main_ui(config["language"], config["theme"])
else:
    setup_screen()
